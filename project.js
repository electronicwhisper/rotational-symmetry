// Generated by CoffeeScript 1.6.3
(function() {
  var App, Canvas, DerivedPoint, Point,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.App = App = (function() {
    function App() {
      this.mousemove_ = __bind(this.mousemove_, this);
      this.resize_ = __bind(this.resize_, this);
      var el;
      el = document.getElementById("c");
      this.canvas = new Canvas(el);
      window.addEventListener("resize", this.resize_);
      document.addEventListener("mousemove", this.mousemove_);
      this.resize_();
    }

    App.prototype.resize_ = function() {
      this.canvas.el.width = document.body.clientWidth;
      return this.canvas.el.height = document.body.clientHeight;
    };

    App.prototype.mousemove_ = function(e) {
      var mousePosition, point;
      mousePosition = new Point(e.clientX, e.clientY);
      point = this.canvas.canvasToWorkspace(mousePosition);
      this.canvas.clear();
      return point.draw(this.canvas);
    };

    return App;

  })();

  Canvas = (function() {
    function Canvas(el) {
      this.el = el;
      this.ctx = this.el.getContext("2d");
    }

    Canvas.prototype.width = function() {
      return this.el.width;
    };

    Canvas.prototype.height = function() {
      return this.el.height;
    };

    Canvas.prototype.canvasToWorkspace = function(canvasPoint) {
      var workspacePoint, x, y;
      x = canvasPoint.x - this.width() / 2;
      y = canvasPoint.y - this.height() / 2;
      return workspacePoint = new Point(x, y);
    };

    Canvas.prototype.workspaceToCanvas = function(workspacePoint) {
      var canvasPoint, x, y;
      x = workspacePoint.x + this.width() / 2;
      y = workspacePoint.y + this.height() / 2;
      return canvasPoint = new Point(x, y);
    };

    Canvas.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.width(), this.height());
    };

    return Canvas;

  })();

  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.size = 4;

    Point.prototype.draw = function(canvas) {
      var ctx;
      this.path_(canvas);
      ctx = canvas.ctx;
      ctx.fillStyle = "#000";
      return ctx.fill();
    };

    Point.prototype.test = function(canvas, canvasPoint) {
      var ctx;
      this.path_(canvas);
      ctx = canvas.ctx;
      return ctx.isPointInPath(canvasPoint.x, canvasPoint.y);
    };

    Point.prototype.path_ = function(canvas) {
      var canvasPoint, ctx;
      canvasPoint = canvas.workspaceToCanvas(this);
      ctx = canvas.ctx;
      ctx.beginPath();
      return ctx.arc(canvasPoint.x, canvasPoint.y, this.size, 0, Math.PI * 2);
    };

    return Point;

  })();

  DerivedPoint = (function() {
    function DerivedPoint(get, set) {
      this.get = get;
      this.set = set;
    }

    return DerivedPoint;

  })();

}).call(this);
